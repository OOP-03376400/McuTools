; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MCUTools"
#define MyAppVersion "12/2015"
#define MyAppPublisher "webmaster442"
#define MyAppURL "http://www.example.com/"
#define MyAppExeName "MCUTools.Loader.exe"
#include <idp.iss>

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{06D01260-762C-42F7-9718-67A163B95C42}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=c:\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
CreateUninstallRegKey=yes
UninstallDisplayIcon={uninstallexe}
InternalCompressLevel=max
MinVersion=0,6.0sp2
OutputDir=..\bin\setup
FlatComponentsList=False
PrivilegesRequired=lowest

[UninstallDelete]
Type: filesandordirs; Name: "{app}\*"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "7z.dll"; Flags: dontcopy
Source: "7z.exe"; Flags: dontcopy
Source: "dotNetFx45_Full_setup.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall ignoreversion uninsremovereadonly

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{tmp}\dotNetFx45_Full_setup.exe"; Parameters: "/passive"; Flags: waituntilterminated skipifdoesntexist shellexec hidewizard; Description: "Installing .net 4.5"; Check: IsDotNet4Detected
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Types]
Name: "Network"; Description: "Network run install";
Name: "Local"; Description: "Local Install / File Share Install";
Name: "Full"; Description: "Full Install";
Name: "Custom"; Description: "Custom Install"; Flags: iscustom

[Components]
Name: "Loader"; Description: "Launcher App"; Types: Network Local Full Custom; Flags: fixed
Name: "Core"; Description: "MCU Tools"; Types: Full Local
Name: "SOC"; Description: "SOC Development Tools"; Types: Full Local
Name: "Apps"; Description: "Applications"; Types: Full
Name: "Apps\Arduino15"; Description: "Arduino IDE 1.5"; ExtraDiskSpaceRequired: 634576236; Types: Full
Name: "Apps\LibreOffice"; Description: "Libre Office"; ExtraDiskSpaceRequired: 389685812; Types: Full
Name: "Apps\Processing"; Description: "Processing 2"; ExtraDiskSpaceRequired: 215432573; Types: Full

[Code]
//-----------------------------------------------------------------------------
const
  Dload-MCU = 'https://googledrive.com/host/0BzRxNHSnXbB5QjJZRG1iQWwyR00/install/mcutools.7z';
  Inst-MCU = '{tmp}\mcutools.7z';
  Dload-SOC = 'https://googledrive.com/host/0BzRxNHSnXbB5QjJZRG1iQWwyR00/install/SOC.7z';
  Inst-SOC = '{tmp}\SOC.7z';
  Dload-Soft-Arduino = 'https://googledrive.com/host/0BzRxNHSnXbB5QjJZRG1iQWwyR00/install/SoftWare/arduino_1_5.7z';
  Inst-Soft-Arduino = '{tmp}\arduino_1_5.7z';
  Dload-Soft-Processing = 'https://googledrive.com/host/0BzRxNHSnXbB5QjJZRG1iQWwyR00/install/SoftWare/processing2.7z';
  Inst-Soft-Processing = '{tmp}\processing2.7z';
  Dload-Soft-LibreOffice = 'https://googledrive.com/host/0BzRxNHSnXbB5QjJZRG1iQWwyR00/install/SoftWare/LibreOfficePortable.7z';
  Inst-Soft-LibreOffice = '{tmp}\LibreOfficePortable.7z';
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key: string;
    install, release, serviceCount: cardinal;
    check45, success: boolean;
begin
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

function IsDotNet4Detected(): boolean;
begin
  result := not IsDotNetDetected('v4.5', 0);
end;

//-----------------------------------------------------------------------------
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

//-----------------------------------------------------------------------------
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure InitializeWizard;
begin
    idpAddFileComp(Dload-MCU, ExpandConstant('Inst-MCU'), 'Core');
    idpAddFileComp(Dload-SOC, ExpandConstant('Inst-SOC'), 'SOC'); 
    idpAddFileComp(Dload-Soft-Arduino,  ExpandConstant('Inst-Soft-Arduino'),  'Apps\Arduino15');
    idpAddFileComp(Dload-Soft-Processing, ExpandConstant('Inst-Soft-Processing'), 'Apps\Processing');
    idpAddFileComp(Dload-Soft-LibreOffice,  ExpandConstant('Inst-Soft-LibreOffice'),  'Apps\LibreOffice');

    idpDownloadAfter(wpReady);
end;
