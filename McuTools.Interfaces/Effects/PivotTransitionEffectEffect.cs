//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Expression.Media.Effects;
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace McuTools.Interfaces.Effects
{

    /// <summary>An effect that pivots the output around a center point.</summary>
    public class PivotTransitionEffectEffect : TransitionEffect
    {
        public enum Direction { Left, Right }

        public static readonly DependencyProperty Input2Property = ShaderEffect.RegisterPixelShaderSamplerProperty("Input2", typeof(PivotTransitionEffectEffect), 1);
        public static readonly DependencyProperty EdgeProperty = DependencyProperty.Register("Edge", typeof(double), typeof(PivotTransitionEffectEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(1)));

        public PivotTransitionEffectEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/MCUTools.Interfaces;component/Effects/PivotTransitionEffectEffect.ps", UriKind.Relative);
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(Input2Property);
            this.UpdateShaderValue(ProgressProperty);
            this.UpdateShaderValue(EdgeProperty);
            this.Edge = 0;
        }

        public PivotTransitionEffectEffect(Direction dir): this()
        {
            if (dir == Direction.Right) this.Edge = 0.5;
        }

        public Brush Input2
        {
            get
            {
                return ((Brush)(this.GetValue(Input2Property)));
            }
            set
            {
                this.SetValue(Input2Property, value);
            }
        }

        public double Edge
        {
            get
            {
                return ((double)(this.GetValue(EdgeProperty)));
            }
            set
            {
                this.SetValue(EdgeProperty, value);
            }
        }

        protected override TransitionEffect DeepCopy()
        {
            throw new NotImplementedException();
        }
    }
}
