//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace McuTools.Interfaces.Effects {
	
	public class ViewEnhancersEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(ViewEnhancersEffect), 0);
		public static readonly DependencyProperty PreProcessProperty = DependencyProperty.Register("PreProcess", typeof(double), typeof(ViewEnhancersEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty BrightnessProperty = DependencyProperty.Register("Brightness", typeof(double), typeof(ViewEnhancersEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty ContrastProperty = DependencyProperty.Register("Contrast", typeof(double), typeof(ViewEnhancersEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(2)));
		public static readonly DependencyProperty CenterPointProperty = DependencyProperty.Register("CenterPoint", typeof(Point), typeof(ViewEnhancersEffect), new UIPropertyMetadata(new Point(0.5D, 0.5D), PixelShaderConstantCallback(3)));
		public static readonly DependencyProperty MagnificationAmountProperty = DependencyProperty.Register("MagnificationAmount", typeof(double), typeof(ViewEnhancersEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(4)));
		public static readonly DependencyProperty AmountProperty = DependencyProperty.Register("Amount", typeof(double), typeof(ViewEnhancersEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(5)));
		public static readonly DependencyProperty InputSizeProperty = DependencyProperty.Register("InputSize", typeof(Size), typeof(ViewEnhancersEffect), new UIPropertyMetadata(new Size(640D, 480D), PixelShaderConstantCallback(6)));
		public static readonly DependencyProperty ColorOverlayProperty = DependencyProperty.Register("ColorOverlay", typeof(Color), typeof(ViewEnhancersEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 0, 0), PixelShaderConstantCallback(7)));
		public ViewEnhancersEffect() {
			PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/MCUTools.Interfaces;component/Effects/ViewEnhancersEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(PreProcessProperty);
			this.UpdateShaderValue(BrightnessProperty);
			this.UpdateShaderValue(ContrastProperty);
			this.UpdateShaderValue(CenterPointProperty);
			this.UpdateShaderValue(MagnificationAmountProperty);
			this.UpdateShaderValue(AmountProperty);
			this.UpdateShaderValue(InputSizeProperty);
			this.UpdateShaderValue(ColorOverlayProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		public double PreProcess {
			get {
				return ((double)(this.GetValue(PreProcessProperty)));
			}
			set {
				this.SetValue(PreProcessProperty, value);
			}
		}
		/// <summary>The brightness offset.</summary>
		public double Brightness {
			get {
				return ((double)(this.GetValue(BrightnessProperty)));
			}
			set {
				this.SetValue(BrightnessProperty, value);
			}
		}
		/// <summary>The contrast multiplier.</summary>
		public double Contrast {
			get {
				return ((double)(this.GetValue(ContrastProperty)));
			}
			set {
				this.SetValue(ContrastProperty, value);
			}
		}
		/// <summary>The center point of the magnified region.</summary>
		public Point CenterPoint {
			get {
				return ((Point)(this.GetValue(CenterPointProperty)));
			}
			set {
				this.SetValue(CenterPointProperty, value);
			}
		}
		/// <summary>The magnification factor.</summary>
		public double MagnificationAmount {
			get {
				return ((double)(this.GetValue(MagnificationAmountProperty)));
			}
			set {
				this.SetValue(MagnificationAmountProperty, value);
			}
		}
		/// <summary>The amount of sharpening.</summary>
		public double Amount {
			get {
				return ((double)(this.GetValue(AmountProperty)));
			}
			set {
				this.SetValue(AmountProperty, value);
			}
		}
		/// <summary>The size of the input (in pixels).</summary>
		public Size InputSize {
			get {
				return ((Size)(this.GetValue(InputSizeProperty)));
			}
			set {
				this.SetValue(InputSizeProperty, value);
			}
		}
		/// <summary>Color Overlay</summary>
		public Color ColorOverlay {
			get {
				return ((Color)(this.GetValue(ColorOverlayProperty)));
			}
			set {
				this.SetValue(ColorOverlayProperty, value);
			}
		}
	}
}
